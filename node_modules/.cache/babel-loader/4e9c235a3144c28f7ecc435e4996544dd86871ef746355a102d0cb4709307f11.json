{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prathibha\\\\Desktop\\\\web_projects\\\\My-Portfolio\\\\Speech_to_Text_React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [textToCopy, setTextToCopy] = useState();\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n\n  //subscribe to thapa technical for more awesome videos\n\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speech to Text Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Seamless Voice-to-Text Conversion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        onClick: () => setTextToCopy(transcript),\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setCopied,\n          children: isCopied ? 'Copied!' : 'Copy to clipboard'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: SpeechRecognition.stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"RCeQpDrFS3uSIb+zcwHwKWmUdQI=\", false, function () {\n  return [useClipboard, useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["SpeechRecognition","useSpeechRecognition","useClipboard","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","textToCopy","setTextToCopy","isCopied","setCopied","successDuration","startListening","continuous","language","transcript","browserSupportsSpeechRecognition","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","stopListening","_c","$RefreshReg$"],"sources":["C:/Users/Prathibha/Desktop/web_projects/My-Portfolio/Speech_to_Text_React/src/App.js"],"sourcesContent":["\r\nimport \"./App.css\"\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport {useState} from \"react\";\r\n\r\n\r\nconst App = () => {\r\n    const [textToCopy, setTextToCopy] = useState();\r\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n        successDuration:1000\r\n    });\r\n\r\n    //subscribe to thapa technical for more awesome videos\r\n\r\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n    if (!browserSupportsSpeechRecognition) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h2>Speech to Text Converter</h2>\r\n                <br/>\r\n                <p>Seamless Voice-to-Text Conversion</p>\r\n\r\n                <div className=\"main-content\" onClick={() =>  setTextToCopy(transcript)}>\r\n                    {transcript}\r\n                </div>\r\n\r\n                <div className=\"btn-style\">\r\n\r\n                    <button onClick={setCopied}>\r\n                        {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n                    </button>\r\n                    <button onClick={startListening}>Start Listening</button>\r\n                    <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAClF,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG/B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC9C,MAAM,CAACS,QAAQ,EAAEC,SAAS,CAAC,GAAGX,YAAY,CAACQ,UAAU,EAAE;IACnDI,eAAe,EAAC;EACpB,CAAC,CAAC;;EAEF;;EAEA,MAAMC,cAAc,GAAGA,CAAA,KAAMf,iBAAiB,CAACe,cAAc,CAAC;IAAEC,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAQ,CAAC,CAAC;EACtG,MAAM;IAAEC,UAAU;IAAEC;EAAiC,CAAC,GAAGlB,oBAAoB,CAAC,CAAC;EAE/E,IAAI,CAACkB,gCAAgC,EAAE;IACnC,OAAO,IAAI;EACf;EAEA,oBACId,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACIf,OAAA;MAAKgB,SAAS,EAAC,WAAW;MAAAD,QAAA,gBACtBf,OAAA;QAAAe,QAAA,EAAI;MAAwB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjCpB,OAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLpB,OAAA;QAAAe,QAAA,EAAG;MAAiC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAExCpB,OAAA;QAAKgB,SAAS,EAAC,cAAc;QAACK,OAAO,EAAEA,CAAA,KAAOf,aAAa,CAACO,UAAU,CAAE;QAAAE,QAAA,EACnEF;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eAENpB,OAAA;QAAKgB,SAAS,EAAC,WAAW;QAAAD,QAAA,gBAEtBf,OAAA;UAAQqB,OAAO,EAAEb,SAAU;UAAAO,QAAA,EACtBR,QAAQ,GAAG,SAAS,GAAG;QAAmB;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eACTpB,OAAA;UAAQqB,OAAO,EAAEX,cAAe;UAAAK,QAAA,EAAC;QAAe;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzDpB,OAAA;UAAQqB,OAAO,EAAE1B,iBAAiB,CAAC2B,aAAc;UAAAP,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBAER,CAAC;AAEX,CAAC;AAAChB,EAAA,CAxCID,GAAG;EAAA,QAEyBN,YAAY,EAOeD,oBAAoB;AAAA;AAAA2B,EAAA,GAT3EpB,GAAG;AA0CT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}