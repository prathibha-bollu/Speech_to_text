{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prathibha\\\\Desktop\\\\web_projects\\\\My-Portfolio\\\\Speech_to_Text_React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useClipboard from \"react-use-clipboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const [textToCopy, setTextToCopy] = useState(\"\");\n  const [isCopied, setCopied] = useClipboard(textToCopy, {\n    successDuration: 1000\n  });\n  useEffect(() => {\n    setTextToCopy(transcript); // keep textToCopy updated with transcript\n  }, [transcript]);\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: 'en-IN'\n  });\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your browser does not support Speech Recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Speech to Text Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Seamless Voice-to-Text Conversion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-style\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setCopied,\n        children: isCopied ? 'Copied!' : 'Copy to clipboard'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        children: \"Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: SpeechRecognition.stopListening,\n        children: \"Stop Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"g89kx+DTUBgH4cORJ4wBdSH7gvY=\", false, function () {\n  return [useSpeechRecognition, useClipboard];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","SpeechRecognition","useSpeechRecognition","useClipboard","jsxDEV","_jsxDEV","App","_s","transcript","browserSupportsSpeechRecognition","textToCopy","setTextToCopy","isCopied","setCopied","successDuration","startListening","continuous","language","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","stopListening","_c","$RefreshReg$"],"sources":["C:/Users/Prathibha/Desktop/web_projects/My-Portfolio/Speech_to_Text_React/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\nimport useClipboard from \"react-use-clipboard\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n    const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n    const [textToCopy, setTextToCopy] = useState(\"\");\r\n    const [isCopied, setCopied] = useClipboard(textToCopy, {\r\n        successDuration: 1000\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTextToCopy(transcript);  // keep textToCopy updated with transcript\r\n    }, [transcript]);\r\n\r\n    const startListening = () => SpeechRecognition.startListening({ continuous: true, language: 'en-IN' });\r\n\r\n    if (!browserSupportsSpeechRecognition) {\r\n        return <p>Your browser does not support Speech Recognition.</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Speech to Text Converter</h2>\r\n            <br/>\r\n            <p>Seamless Voice-to-Text Conversion</p>\r\n\r\n            <div className=\"main-content\">\r\n                {transcript}\r\n            </div>\r\n\r\n            <div className=\"btn-style\">\r\n                <button onClick={setCopied}>\r\n                    {isCopied ? 'Copied!' : 'Copy to clipboard'}\r\n                </button>\r\n                <button onClick={startListening}>Start Listening</button>\r\n                <button onClick={SpeechRecognition.stopListening}>Stop Listening</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAClF,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM;IAAEC,UAAU;IAAEC;EAAiC,CAAC,GAAGP,oBAAoB,CAAC,CAAC;EAC/E,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,SAAS,CAAC,GAAGV,YAAY,CAACO,UAAU,EAAE;IACnDI,eAAe,EAAE;EACrB,CAAC,CAAC;EAEFf,SAAS,CAAC,MAAM;IACZY,aAAa,CAACH,UAAU,CAAC,CAAC,CAAE;EAChC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMO,cAAc,GAAGA,CAAA,KAAMd,iBAAiB,CAACc,cAAc,CAAC;IAAEC,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAQ,CAAC,CAAC;EAEtG,IAAI,CAACR,gCAAgC,EAAE;IACnC,oBAAOJ,OAAA;MAAAa,QAAA,EAAG;IAAiD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnE;EAEA,oBACIjB,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAL,QAAA,gBACtBb,OAAA;MAAAa,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCjB,OAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLjB,OAAA;MAAAa,QAAA,EAAG;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAExCjB,OAAA;MAAKkB,SAAS,EAAC,cAAc;MAAAL,QAAA,EACxBV;IAAU;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAENjB,OAAA;MAAKkB,SAAS,EAAC,WAAW;MAAAL,QAAA,gBACtBb,OAAA;QAAQmB,OAAO,EAAEX,SAAU;QAAAK,QAAA,EACtBN,QAAQ,GAAG,SAAS,GAAG;MAAmB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACTjB,OAAA;QAAQmB,OAAO,EAAET,cAAe;QAAAG,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDjB,OAAA;QAAQmB,OAAO,EAAEvB,iBAAiB,CAACwB,aAAc;QAAAP,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACf,EAAA,CApCID,GAAG;EAAA,QACoDJ,oBAAoB,EAE/CC,YAAY;AAAA;AAAAuB,EAAA,GAHxCpB,GAAG;AAsCT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}